@import 'variables';
@import 'mixins';

$input-padding-y: $input-btn-padding-y;
$input-padding-x: $input-btn-padding-x;
$input-color: $black;
$input-bg: $grey-100;
$input-border-width: 1px;
$input-border-color: $grey-200;
$input-border-radius: $border-radius;
$input-transition: border-color $transition-duration ease-in-out,
  box-shadow $transition-duration ease-in-out;
$input-line-height: $line-height-base;
$input-placeholder-color: $grey-600;
$input-plaintext-color: $body-color;
$input-height-border: $input-border-width * 2;
$input-height: add(
  $input-line-height * 1em,
  add($input-padding-y * 2, $input-height-border, false)
);

$input-focus-color: $input-color;
$input-focus-bg: $input-bg;
$input-focus-border-color: tint-color($component-active-bg, 50%);
$input-focus-box-shadow: $input-btn-focus-box-shadow;

$input-disabled-color: $grey-700;
$input-disabled-bg: $grey-200;
$input-disabled-border-color: null;

$input-error-border-color: $red;

$form-file-button-color: $input-color;
$form-file-button-bg: $grey-200;
$form-file-button-hover-bg: shade-color($form-file-button-bg, 5%);
$btn-transition: color $transition-duration ease-in-out,
  background-color $transition-duration ease-in-out,
  border-color $transition-duration ease-in-out,
  box-shadow $transition-duration ease-in-out;

$form-check-input-width: 1em;
$form-check-min-height: $font-size-base * $line-height-base;
$form-check-padding-start: $form-check-input-width + 0.5em;
$form-check-margin-bottom: 0.125rem;
$form-check-transition: null;

$form-check-input-bg: $white;
$form-check-input-border: 1px solid rgba(0, 0, 0, 0.25);
$form-check-input-border-radius: 0.25em;
$form-check-radio-border-radius: 50%;
$form-check-input-active-filter: brightness(90%);
$form-check-input-focus-border: $input-focus-border-color;
$form-check-input-focus-box-shadow: $input-btn-focus-box-shadow;

$form-check-input-checked-bg-color: $component-active-bg;
$form-check-input-checked-border-color: $form-check-input-checked-bg-color;
$form-check-input-checked-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'><path fill='none' stroke='#{$form-check-input-checked-color}' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10l3 3l6-6'/></svg>");
$form-check-radio-checked-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='2' fill='#{$form-check-input-checked-color}'/></svg>");

$form-check-input-indeterminate-bg-color: $component-active-bg;
$form-check-input-indeterminate-border-color: $form-check-input-indeterminate-bg-color;
$form-check-input-indeterminate-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'><path fill='none' stroke='#{$form-check-input-indeterminate-color}' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/></svg>");

$form-check-input-disabled-opacity: 0.5;
$form-check-label-disabled-opacity: $form-check-input-disabled-opacity;

$form-switch-color: rgba(0, 0, 0, 0.25);
$form-switch-width: 2em;
$form-switch-padding-start: $form-switch-width + 0.5em;
$form-switch-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-color}'/></svg>");
$form-switch-border-radius: $form-switch-width;
$form-switch-transition: background-position 0.15s ease-in-out;

$form-switch-focus-color: $input-focus-border-color;
$form-switch-focus-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-focus-color}'/></svg>");

$form-switch-checked-color: $component-active-color;
$form-switch-checked-bg-image: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'><circle r='3' fill='#{$form-switch-checked-color}'/></svg>");
$form-switch-checked-bg-position: right center;

.field > label {
  color: $black;
  margin-bottom: 0.5rem;
  @include font-size($font-size-sm);
}

.field > input,
.field > textarea {
  display: block;
  width: 100%;
  padding: $input-padding-y $input-padding-x;
  color: $input-color;
  background-color: $input-bg;
  background-clip: padding-box;
  border: $input-border-width solid $input-border-color;
  appearance: none; // Fix appearance for date inputs in Safari
  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  border-radius: $input-border-radius;
  @include transition($input-transition);

  &[type='file'] {
    overflow: hidden; // prevent pseudo element button overlap

    &:not(:disabled):not([readonly]) {
      cursor: pointer;
    }
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  &:focus {
    color: $input-focus-color;
    background-color: $input-focus-bg;
    border-color: $input-focus-border-color;
    outline: 0;
    box-shadow: $input-focus-box-shadow;
  }

  // Add some height to date inputs on iOS
  // https://github.com/twbs/bootstrap/issues/23307
  // TODO: we can remove this workaround once https://bugs.webkit.org/show_bug.cgi?id=198959 is resolved
  &::-webkit-date-and-time-value {
    // Multiply line-height by 1em if it has no unit
    height: if(
      unit($input-line-height) == '',
      $input-line-height * 1em,
      $input-line-height
    );
  }

  &::placeholder {
    color: $input-placeholder-color;
    // Override Firefox's unusual opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    color: $input-disabled-color;
    background-color: $input-disabled-bg;
    border-color: $input-disabled-border-color;
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
    cursor: not-allowed;
  }

  // File input buttons theming
  // stylelint-disable-next-line selector-pseudo-element-no-unknown
  &::file-selector-button {
    padding: $input-padding-y $input-padding-x;
    margin: (-$input-padding-y) (-$input-padding-x);
    margin-inline-end: $input-padding-x;
    color: $form-file-button-color;
    @include gradient-bg($form-file-button-bg);
    pointer-events: none;
    border-color: inherit;
    border-style: solid;
    border-width: 0;
    border-inline-end-width: $input-border-width;
    border-radius: 0; // stylelint-disable-line property-disallowed-list
    @include transition($btn-transition);
  }

  // stylelint-disable-next-line selector-pseudo-element-no-unknown
  &:hover:not(:disabled):not([readonly])::file-selector-button {
    background-color: $form-file-button-hover-bg;
  }

  &::-webkit-file-upload-button {
    padding: $input-padding-y $input-padding-x;
    margin: (-$input-padding-y) (-$input-padding-x);
    margin-inline-end: $input-padding-x;
    color: $form-file-button-color;
    @include gradient-bg($form-file-button-bg);
    pointer-events: none;
    border-color: inherit;
    border-style: solid;
    border-width: 0;
    border-inline-end-width: $input-border-width;
    border-radius: 0; // stylelint-disable-line property-disallowed-list
    @include transition($btn-transition);
  }

  &:hover:not(:disabled):not([readonly])::-webkit-file-upload-button {
    background-color: $form-file-button-hover-bg;
  }
}

// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.readonly > input {
  display: block;
  width: 100%;
  padding: $input-padding-y 0;
  margin-bottom: 0; // match inputs if this class comes on inputs with margins
  line-height: $input-line-height;
  color: $input-plaintext-color;
  background-color: transparent;
  border: solid transparent;
  border-width: $input-border-width 0;
}

.error > input,
.error > textarea {
  border-color: $input-error-border-color;
}

// Make sure textareas don't shrink too much when resized
// https://github.com/twbs/bootstrap/pull/29124
.field > textarea {
  min-height: $input-height;
}

.field > input[type='color'] {
  max-width: 3rem;
  height: auto; // Override fixed browser height
  padding: $input-padding-y;

  &:not(:disabled):not([readonly]) {
    cursor: pointer;
  }

  &::-moz-color-swatch {
    height: if(
      unit($input-line-height) == '',
      $input-line-height * 1em,
      $input-line-height
    );
    border-radius: $input-border-radius;
  }

  &::-webkit-color-swatch {
    height: if(
      unit($input-line-height) == '',
      $input-line-height * 1em,
      $input-line-height
    );
    border-radius: $input-border-radius;
  }
}

.fieldError {
  margin-top: 0.375rem;
}

.errorMessage {
  color: $red;
  @include font-size($font-size-base);

  & > svg {
    width: 1em;
    fill: $red;
    margin-right: 0.5em;
    position: relative;
    top: -0.125em;
  }

  &--sm {
    @include font-size($font-size-sm);
  }

  &--lg {
    @include font-size($font-size-lg);
  }
}

.submit {
  display: inline-block;
  position: relative;

  & > input {
    @include button-variant('blue');
    display: block;
    width: 100%;
    @include transition(
      background-color $transition-duration ease-in-out,
      border-color $transition-duration ease-in-out,
      box-shadow $transition-duration ease-in-out
    );
  }

  &.disabled {
    @include loading($color: $white, $size: sm);

    & > input {
      color: transparent;
    }
  }
}

.check {
  display: block;
  min-height: $form-check-min-height;
  padding-left: $form-check-padding-start;
  margin-bottom: $form-check-margin-bottom;

  & > input {
    float: left;
    margin-left: $form-check-padding-start * -1;
    width: $form-check-input-width;
    height: $form-check-input-width;
    margin-top: ($line-height-base - $form-check-input-width) / 2;
    vertical-align: top;
    background-color: $form-check-input-bg;
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    border: $form-check-input-border;
    appearance: none;
    color-adjust: exact; // Keep themed appearance for print
    @include transition($form-check-transition);

    &[type='checkbox'] {
      border-radius: $form-check-input-border-radius;
    }

    &[type='radio'] {
      border-radius: $form-check-radio-border-radius;
    }

    &:active {
      filter: $form-check-input-active-filter;
    }

    &:focus {
      border-color: $form-check-input-focus-border;
      outline: 0;
      box-shadow: $form-check-input-focus-box-shadow;
    }

    &:checked {
      background-color: $form-check-input-checked-bg-color;
      border-color: $form-check-input-checked-border-color;

      &[type='checkbox'] {
        background-image: escape-svg($form-check-input-checked-bg-image);
      }

      &[type='radio'] {
        background-image: escape-svg($form-check-radio-checked-bg-image);
      }
    }

    &[type='checkbox']:indeterminate {
      background-color: $form-check-input-indeterminate-bg-color;
      border-color: $form-check-input-indeterminate-border-color;
      background-image: escape-svg($form-check-input-indeterminate-bg-image);
    }

    &:disabled {
      pointer-events: none;
      filter: none;
      opacity: $form-check-input-disabled-opacity;
    }

    // Use disabled attribute in addition of :disabled pseudo-class
    // See: https://github.com/twbs/bootstrap/issues/28247
    &[disabled],
    &:disabled {
      ~ label {
        opacity: $form-check-label-disabled-opacity;
      }
    }
  }

  &__error {
    color: $red;
    @include font-size($font-size-sm);
  }
}

.check.switch {
  padding-left: $form-switch-padding-start;

  & > input {
    width: $form-switch-width;
    margin-left: $form-switch-padding-start * -1;
    background-image: escape-svg($form-switch-bg-image);
    background-position: left center;
    border-radius: $form-switch-border-radius;
    @include transition($form-switch-transition);

    &:focus {
      background-image: escape-svg($form-switch-focus-bg-image);
    }

    &:checked {
      background-position: $form-switch-checked-bg-position;
      background-image: escape-svg($form-switch-checked-bg-image);
    }
  }
}

.select {
  color: $black;

  &:global(__control) {
    background-color: $input-bg !important;
    border-color: $input-border-color !important;
    transition: box-shadow $transition-duration !important;

    &:global(--is-focused) {
      box-shadow: $input-focus-box-shadow !important;
    }
  }

  &:global(__value-container) {
    padding: calc(#{$input-padding-y} - 4px) 1rem !important;
  }

  &:global(__indicator-separator) {
    background-color: $grey-400 !important;
  }

  &:global(__dropdown-indicator) {
    color: $grey-400 !important;
  }

  &:global(__option) {
    padding: 0.5rem 1rem !important;

    &:global(--is-focused) {
      background-color: $blue-light !important;
    }

    &:global(--is-selected) {
      background-color: $blue !important;
    }
  }
}
