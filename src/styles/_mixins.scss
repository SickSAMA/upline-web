@import 'bootstrap/scss/functions';
@import './variables';
@import 'bootstrap/scss/mixins';

$btn-line-height: $line-height-base;
$btn-padding-y: $input-btn-padding-y;
$btn-padding-x: $input-btn-padding-x;
$btn-font-size: $font-size-base;
$btn-focus-width: $input-btn-focus-width;
$btn-focus-box-shadow: $input-btn-focus-box-shadow;

$flex-middle-vertical-margin: 2rem;

$modal-box-shadow: $box-shadow-lg;
$modal-overlay-opacity: 0.3;
$modal-dialog-margin-y: 2rem;
$modal-dialog-border-radius: 2.5rem;

@mixin container {
  @include make-container($grid-gutter-width / 2);

  @each $breakpoint, $width in $container-max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $width;
    }
  }
}

@mixin container-fluid {
  @include make-container($grid-gutter-width / 2);
}

@mixin row() {
  @include make-row();

  & + & {
    margin-top: $grid-gutter-width;
  }

  & > * {
    @include make-col-ready();
  }
}

@mixin button() {
  display: inline-block;
  font-weight: $font-weight-normal;
  line-height: $btn-line-height;
  color: $body-color;
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  user-select: none;
  background-color: transparent;
  border: 1px solid transparent;
  padding: $btn-padding-y $btn-padding-x;
  border-radius: 0;
  @include font-size($btn-font-size);
  @include transition(
    color $transition-duration ease-in-out,
    background-color $transition-duration ease-in-out,
    border-color $transition-duration ease-in-out,
    box-shadow $transition-duration ease-in-out
  );

  &:hover {
    color: $body-color;
    text-decoration: none;
  }

  &:focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;
  }

  &:disabled,
  &.disabled,
  fieldset:disabled & {
    pointer-events: none;
    opacity: $btn-disabled-opacity;
    box-shadow: none;
  }
}

@mixin button-variant($style: 'blue') {
  $background: $blue;
  $border: $blue;
  $color: color-contrast($background);

  $hover-background: $blue-dark;
  $hover-border: $blue-dark;
  $hover-color: color-contrast($hover-background);

  $active-background: $blue-dark;
  $active-border: $blue-dark;
  $active-color: color-contrast($active-background);

  $disabled-background: $background;
  $disabled-border: $border;
  $disabled-color: color-contrast($disabled-background);

  @if $style == 'light-outline' {
    $background: $white;
    $border: $grey-600;
    $color: $grey-700;

    $hover-background: $white;
    $hover-border: $grey-800;
    $hover-color: $grey-900;

    $active-background: $white;
    $active-border: $grey-800;
    $active-color: $grey-900;

    $disabled-background: $background;
    $disabled-border: $grey-500;
    $disabled-color: $grey-600;
  } @else if $style == 'light' {
    $background: $grey-200;
    $border: $grey-200;
    $color: $grey-900;

    $hover-background: $grey-300;
    $hover-border: $grey-300;
    $hover-color: $grey-900;

    $active-background: $grey-300;
    $active-border: $grey-300;
    $active-color: $grey-900;

    $disabled-background: $background;
    $disabled-border: $border;
    $disabled-color: color-contrast($disabled-background);
  } @else if $style == 'white' {
    $background: $white;
    $border: $white;
    $color: $body-color;

    $hover-background: $white;
    $hover-border: $white;
    $hover-color: $body-color;

    $active-background: $white;
    $active-border: $white;
    $active-color: $body-color;

    $disabled-background: $background;
    $disabled-border: $border;
    $disabled-color: color-contrast($disabled-background);
  }

  $btn-box-shadow: none;

  @include button();
  color: $color;
  background-color: $background;
  border-color: $border;
  box-shadow: $btn-box-shadow;
  border-radius: 10rem;

  &:hover,
  &:focus {
    color: $hover-color;
    background-color: $hover-background;
    border-color: $hover-border;
  }

  &:focus {
    box-shadow: 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), 0.5);
  }

  &:active,
  &.active {
    color: $active-color;
    background-color: $active-background;
    border-color: $active-border;
    &:focus {
      box-shadow: 0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), 0.5);
    }
  }

  &:disabled,
  &.disabled {
    color: $disabled-color;
    background-color: $disabled-background;
    border-color: $disabled-border;
  }
}

@mixin above() {
  &:hover,
  &:focus,
  &:active {
    @content;
  }
}

@mixin flex-middle($vertical-margin: $flex-middle-vertical-margin) {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;

  &::before,
  &::after {
    content: '';
    flex-basis: $vertical-margin;
    flex-shrink: 0;
  }

  & > div {
    flex-shrink: 0;
  }
}

@mixin modal($position: center) {
  @if $position == center {
    @include flex-middle($modal-dialog-margin-y);
  }

  position: fixed;
  top: 0;
  left: 0;
  z-index: $zindex-modal;
  display: none;
  width: 100%;
  height: 100%;
  overflow: hidden;
  // Prevent Chrome on Windows from adding a focus outline. For details, see
  // https://github.com/twbs/bootstrap/pull/10951.
  outline: 0;
  // https://developer.apple.com/documentation/safari_release_notes/safari_13_release_notes
  // `-webkit-overflow-scrolling: touch;` is not needed since safari 13.
  background-color: rgba(0, 0, 0, $modal-overlay-opacity);

  &.fade {
    opacity: 0;
    @include transition(opacity 0.15s ease-in-out);
  }

  &--after-open.fade {
    opacity: 1;
  }

  &--before-close.fade {
    opacity: 0;
  }

  :global(.modal-open) & {
    overflow-x: hidden;
    overflow-y: auto;
    display: flex;
  }

  &__dialog {
    background-color: $white;
    position: relative;
    border-radius: $modal-dialog-border-radius;
    box-shadow: $modal-box-shadow;
    overflow: hidden;

    .fade > & {
      transform: translate(0, -50px);
      @include transition(transform 0.15s ease-out);
    }

    .fade > &--after-open {
      transform: none;
    }

    .fade > &--before-close {
      transform: translate(0, -50px);
    }
  }
}

@mixin loading($size: normal, $color: $blue) {
  $container-size: 1.5rem;
  $box-size: 0.375rem;
  @if $size == lg {
    $container-size: 2.5rem;
    $box-size: 0.75rem;
  }

  $transiton-distance: $container-size - $box-size;

  position: relative;

  &::before,
  &::after {
    content: '';
    display: block;
    background-color: $color;
    width: $box-size;
    height: $box-size;
    position: absolute;
    z-index: 1;
    top: 50%;
    left: 50%;
    animation: cubemove 1.8s infinite ease-in-out;
  }

  &::after {
    animation-delay: -0.9s;
  }

  @keyframes cubemove {
    0% {
      transform: translate(-$container-size / 2, -$container-size / 2)
        rotate(0deg);
    }
    25% {
      transform: translate(
          $transiton-distance - $container-size / 2,
          -$container-size / 2
        )
        rotate(-90deg) scale(0.5);
    }
    50% {
      transform: translate(
          $transiton-distance - $container-size / 2,
          $transiton-distance - $container-size / 2
        )
        rotate(-180deg);
    }
    75% {
      transform: translate(
          -$container-size / 2,
          $transiton-distance - $container-size / 2
        )
        rotate(-270deg) scale(0.5);
    }
    100% {
      transform: translate(-$container-size / 2, -$container-size / 2)
        rotate(-360deg);
    }
  }
}

@mixin content() {
  @include container();
  padding-top: 5rem;
  padding-bottom: 5rem;

  & > h1 {
    margin-bottom: 2rem;
  }

  & > h2 {
    @include font-size(1.5rem);
    text-transform: capitalize;
    margin-top: 2.5rem;
    margin-bottom: 1.5rem;
  }

  & > h4 {
    @include font-size(1.125rem);
    margin-top: 1.5rem;
    margin-bottom: 1.125rem;
  }

  strong {
    font-weight: $font-weight-bold;
  }
}
